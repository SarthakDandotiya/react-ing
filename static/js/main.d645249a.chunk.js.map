{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","totalCounters","console","log","react_default","a","createElement","className","href","Counter","prevProps","prevState","_this","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","classes","value","count","Component","Counters","_this$props","onReset","counters","map","components_counter","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleIncrement","toConsumableArray","index","indexOf","objectSpread","setState","handleReset","c","handleDelete","counterId","filter","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d645249a.chunk.js","sourcesContent":["import React from 'react';\n\n// Stateless Functional Component\nconst Navbar = ({ totalCounters }) => {\n\tconsole.log('Navbar - Rendered');\n\treturn (\n\t\t<nav className='navbar navbar-light bg-light'>\n\t\t\t<a className='navbar-brand font-weight-bold' href='/'>\n\t\t\t\tItems{' '}\n\t\t\t\t<span className='badge badge-success'>{totalCounters}</span>\n\t\t\t</a>\n\t\t</nav>\n\t);\n};\n\nexport default Navbar;\n","import React, { Component } from 'react';\n\nclass Counter extends Component {\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconsole.log('Counter - Updated');\n\t\t// console.log('Previous Props - ', prevProps);\n\t\t// console.log('Previous State - ', prevState);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconsole.log('Counter - Unmount');\n\t}\n\n\trender() {\n\t\tconsole.log('Counter - Rendered');\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<span className={this.getBadgeClasses()}>\n\t\t\t\t\t{this.formatCount()}\n\t\t\t\t</span>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => this.props.onIncrement(this.props.counter)}\n\t\t\t\t\tclassName='btn btn-secondary btn-sm'>\n\t\t\t\t\tIncrement\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => this.props.onDelete(this.props.counter.id)}\n\t\t\t\t\tclassName='btn btn-danger btn-sm m-2'>\n\t\t\t\t\tDelete\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tgetBadgeClasses() {\n\t\tlet classes = 'badge m-2 badge-';\n\t\tclasses += this.props.counter.value === 0 ? 'warning' : 'primary';\n\t\treturn classes;\n\t}\n\n\tformatCount() {\n\t\tconst { value: count } = this.props.counter;\n\t\treturn count === 0 ? 'Zero' : count;\n\t}\n}\n\nexport default Counter;\n","import React, { Component } from 'react';\nimport Counter from './counter';\n\nclass Counters extends Component {\n\trender() {\n\t\tconsole.log('Counters - Rendered');\n\n\t\tconst { onReset, counters, onDelete, onIncrement } = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={onReset}\n\t\t\t\t\tclassName='btn btn-primary btn-sm m-2'>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t\t{counters.map(counter => (\n\t\t\t\t\t<Counter\n\t\t\t\t\t\tkey={counter.id}\n\t\t\t\t\t\tonIncrement={onIncrement}\n\t\t\t\t\t\tonDelete={onDelete}\n\t\t\t\t\t\tcounter={counter}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Counters;\n","import React, { Component } from 'react';\nimport Navbar from './components/navbar';\nimport './App.css';\nimport Counters from './components/counters';\n\nclass App extends Component {\n\tstate = {\n\t\tcounters: [\n\t\t\t{ id: 1, value: 0 },\n\t\t\t{ id: 2, value: 0 },\n\t\t\t{ id: 3, value: 0 },\n\t\t\t{ id: 4, value: 0 }\n\t\t]\n\t};\n\n\tconstructor() {\n\t\tsuper();\n\t\tconsole.log('App - Constructor');\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('App - Mounted');\n\t}\n\n\thandleIncrement = counter => {\n\t\tconst counters = [...this.state.counters];\n\t\tconst index = counters.indexOf(counter);\n\t\tcounters[index] = { ...counter };\n\t\tcounters[index].value++;\n\t\tthis.setState({ counters });\n\t};\n\n\thandleReset = () => {\n\t\tconst counters = this.state.counters.map(c => {\n\t\t\tc.value = 0;\n\t\t\treturn c;\n\t\t});\n\t\tthis.setState({ counters });\n\t};\n\n\thandleDelete = counterId => {\n\t\tconst counters = this.state.counters.filter(c => c.id !== counterId);\n\t\tthis.setState({ counters: counters });\n\t};\n\trender() {\n\t\tconsole.log('App - Rendered');\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Navbar\n\t\t\t\t\ttotalCounters={\n\t\t\t\t\t\tthis.state.counters.filter(c => c.value > 0).length\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<main className='container-fluid'>\n\t\t\t\t\t<Counters\n\t\t\t\t\t\tcounters={this.state.counters}\n\t\t\t\t\t\tonReset={this.handleReset}\n\t\t\t\t\t\tonDelete={this.handleDelete}\n\t\t\t\t\t\tonIncrement={this.handleIncrement}\n\t\t\t\t\t/>\n\t\t\t\t</main>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}